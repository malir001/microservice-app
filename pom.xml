<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.apache.maven.archetypes</groupId>
	<artifactId>maven-archetype-quickstart</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<!-- This build is set up to use profiles. The default "dev" profile includes all required build properties -->
	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
				<property>
					<name>profile.target</name>
					<value>dev</value>
				</property>
			</activation>
			<!-- ALL the following properties need to be supplied -->
			<properties>
				<!-- GENERIC SECTION -->
				<!-- The name of the WAR file that we are building -->
				<project.build.finalWarName></project.build.finalWarName>
				
				<!-- set this to true if you want to provide an own web.xml file -->
				<project.build.failOnMissingWebXml>false</project.build.failOnMissingWebXml>
				
				<!-- Which files to exclude in our final WAR file. -->
				<!-- The default results in a stripped WAR file for a Linux box and a MySQL database -->
				<project.build.excludePackages>
					WEB-INF/bin/**,
					WEB-INF/database/*.db2,
					WEB-INF/database/*.oracle,
					WEB-INF/database/*.sqlserver,
					WEB-INF/lib/*freebsd*.so,
					WEB-INF/lib/*aix*.so,
					WEB-INF/lib/*solaris*.so,
					WEB-INF/lib/*hpux*.*,
					WEB-INF/lib/*ia64*.so,
					WEB-INF/lib/*ppc*.so,
					WEB-INF/lib/*ppc64*.so,
					WEB-INF/lib/*macosx.*,
					WEB-INF/lib/sigar-*-winnt.*
				</project.build.excludePackages>
				
				<!-- Creates a JAR file containing the compiled classes  -->
				<project.build.archiveClassesToJar>true</project.build.archiveClassesToJar>
				
				<!-- ARTIFACTS SECTION -->
				<!-- The groupId of the maven artifact where the RELEASE-WAR file is located -->
				<sailpoint.release.groupid></sailpoint.release.groupid>
				
				<!-- The artifactId of the maven artifact where the RELEASE-WAR file is located -->
				<sailpoint.release.artifactid></sailpoint.release.artifactid>
				
				<!-- The version of the maven artifact where the RELEASE-WAR file is located -->
				<sailpoint.release.version></sailpoint.release.version>
				
				<!-- The groupId of the maven artifact where the PATCH-WAR file is located -->
				<sailpoint.patch.groupid></sailpoint.patch.groupid>
				
				<!-- The artifactId of the maven artifact where the PATCH-WAR file is located -->
				<sailpoint.patch.artifactid></sailpoint.patch.artifactid>
				
				<!-- The version of the maven artifact where the PATCH-WAR file is located -->
				<sailpoint.patch.version></sailpoint.patch.version>
				
				<!-- HOTFIX SECTION -->
				<!-- Uncomment the following lines if you want to include an EFIX -->
				<!-- You also have to uncomment the HOTFIX SECTION in the maven-war-plugin configuration -->
				<!-- and in the dependency configuration below -->
				<!-- 
				The groupId of the maven artifact where the EFIX-WAR file is located
				<sailpoint.patch.groupid></sailpoint.patch.groupid>
				
				The artifactId of the maven artifact where the EFIX-WAR file is located
				<sailpoint.efix.artifactid></sailpoint.efix.artifactid>
				
				The version of the maven artifact where the EFIX-WAR file is located
				<sailpoint.efix.version></sailpoint.efix.version>
				 -->
			</properties>
		</profile>
	</profiles>
	<build>
		<finalName>${project.build.finalWarName}</finalName>
		<plugins>
			<plugin>
				<groupId>de.whisperedshouts</groupId>
				<artifactId>iiqentities-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>process-resources</phase>
						<goals>
							<goal>generate-xml</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.artifactId}-${project.version}/WEB-INF/config/custom-artifacts</outputDirectory>
							<xmlEntityFile>custom_iiqObjects.xml</xmlEntityFile>
							<tokenFile>${basedir}/src/main/resources/tokens.properties</tokenFile>
							<entityFolder>${basedir}/src/main/entities</entityFolder>
							<createImportCommandXml>false</createImportCommandXml>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<executions>
					<execution>
						<id>copy-webapp-resources</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.artifactId}-${project.version}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/webapp</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-classes-resources</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.artifactId}-${project.version}/WEB-INF/classes</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<includeEmptyDirectories>true</includeEmptyDirectories>
					<warSourceDirectory>${project.build.directory}/${project.artifactId}-${project.version}</warSourceDirectory>
					<packagingExcludes>${project.build.excludePackages}</packagingExcludes>
					<archiveClasses>${project.build.archiveClassesToJar}</archiveClasses>
					<failOnMissingWebXml>${project.build.failOnMissingWebXml}</failOnMissingWebXml>
					<!-- Order of overlays is of importance. First one to contain a file wins if the following ones contain the file themselves -->
					<overlays>
						<!-- Empty one points to our current project -->
						<overlay></overlay>
						<!-- HOTFIX SECTION -->
						<!-- ATTENTION: IF you want to include a HOTFIX, uncomment the following section -->
						<!--
						<overlay>
							<groupId>${sailpoint.efix.groupid}</groupId>
							<artifactId>${sailpoint.efix.artifactid}</artifactId>
						</overlay>
						-->
						<overlay>
							<groupId>${sailpoint.patch.groupid}</groupId>
							<artifactId>${sailpoint.patch.artifactid}</artifactId>
						</overlay>
						<overlay>
							<groupId>${sailpoint.release.groupid}</groupId>
							<artifactId>${sailpoint.release.artifactid}</artifactId>
						</overlay>
					</overlays>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>${sailpoint.release.groupid}</groupId>
			<artifactId>${sailpoint.release.artifactid}</artifactId>
			<version>${sailpoint.release.version}</version>
			<type>war</type>
		</dependency>
		<dependency>
			<groupId>${sailpoint.patch.groupid}</groupId>
			<artifactId>${sailpoint.patch.artifactid}</artifactId>
			<version>${sailpoint.patch.version}</version>
			<type>war</type>
		</dependency>
		<!-- HOTFIX SECTION -->
		<!-- 
		<dependency>
			<groupId>${sailpoint.efix.groupid}</groupId>
			<artifactId>${sailpoint.efix.artifactid}</artifactId>
			<version>${sailpoint.efix.version}</version>
			<type>war</type>
		</dependency>
		 -->
	</dependencies>
</project>
